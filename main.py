import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
api_key = '8f528085-448c-4480-a2b0-d7f72afb38ad'       # ‡πÉ‡∏™‡πà API KEY
secret = '05A665CEAF8B2161483DF63CB10085D2'  # ‡πÉ‡∏™‡πà secret ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
password = 'Jirawat1-'  # ‡πÉ‡∏™‡πà password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
symbol = 'BTC/USDT:USDT'
timeframe = '15m'
leverage = 20
tp_value = 500
sl_value = 990
be_profit_trigger = 350
be_sl = 100

telegram_token = '7752789264:AAF-0zdgHsSSYe7PS17ePYThOFP3k7AjxBY'
telegram_chat_id = '8104629569'

# === ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ===
current_position = None  # None, 'long', 'short'
entry_price = None
order_id = None
sl_moved = False
last_ema_state = None
portfolio_balance = 0
last_daily_report = None

# === Exchange Setup ===
exchange = ccxt.okx({
    'apiKey': api_key,
    'secret': secret,
    'password': password,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.set_sandbox_mode(False)

# === Telegram ===
def send_telegram(msg):
    try:
        requests.get(
            f'https://api.telegram.org/bot{telegram_token}/sendMessage',
            params={'chat_id': telegram_chat_id, 'text': msg},
            timeout=10
        )
        logger.info(f"Telegram: {msg}")
    except Exception as e:
        logger.error(f"Telegram error: {e}")
        # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Error ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Telegram
        logger.error("‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram ‡πÑ‡∏î‡πâ")

# === ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ===
def get_portfolio_balance():
    global portfolio_balance
    try:
        balance = exchange.fetch_balance()
        usdt_balance = balance['USDT']['free'] + balance['USDT']['used']
        portfolio_balance = usdt_balance
        return usdt_balance
    except Exception as e:
        logger.error(f"Get balance error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return 0

# === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ===
def calculate_ema(prices, period):
    if len(prices) < period:
        return None
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ SMA
    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))
    
    return ema

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á EMA (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô) ===
def check_ema_cross():
    global last_ema_state
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=250)
        closes = [candle[4] for candle in ohlcv]
        
        if len(closes) < 200:
            return None
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
        current_ema50 = calculate_ema(closes, 50)
        current_ema200 = calculate_ema(closes, 200)
        prev_ema50 = calculate_ema(closes[:-1], 50)
        prev_ema200 = calculate_ema(closes[:-1], 200)
        prev2_ema50 = calculate_ema(closes[:-2], 50)
        prev2_ema200 = calculate_ema(closes[:-2], 200)
        
        if None in [current_ema50, current_ema200, prev_ema50, prev_ema200, prev2_ema50, prev2_ema200]:
            return None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô)
        cross_signal = None
        
        # Golden Cross: EMA50 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ EMA200
        if (prev2_ema50 <= prev2_ema200 and 
            prev_ema50 >= prev_ema200 and 
            current_ema50 > current_ema200):
            cross_signal = 'long'
            logger.info(f"Golden Cross detected (Fast): EMA50({current_ema50:.2f}) > EMA200({current_ema200:.2f})")
        
        # Death Cross: EMA50 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏•‡∏á‡πÉ‡∏ï‡πâ EMA200
        elif (prev2_ema50 >= prev2_ema200 and 
              prev_ema50 <= prev_ema200 and 
              current_ema50 < current_ema200):
            cross_signal = 'short'
            logger.info(f"Death Cross detected (Fast): EMA50({current_ema50:.2f}) < EMA200({current_ema200:.2f})")
        
        return cross_signal
        
    except Exception as e:
        logger.error(f"EMA calculation error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        return None

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
def get_current_position():
    try:
        positions = exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['contracts'] > 0:
                return {
                    'side': pos['side'],
                    'size': pos['contracts'],
                    'entry_price': pos['entryPrice'],
                    'unrealized_pnl': pos['unrealizedPnl']
                }
        return None
    except Exception as e:
        logger.error(f"Get position error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return None

# === ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° TP/SL (‡πÉ‡∏ä‡πâ 50% ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï) ===
def open_order_with_tpsl(direction):
    global current_position, entry_price, order_id, sl_moved
    
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_pos = get_current_position()
        if existing_pos:
            logger.info("‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        balance = get_portfolio_balance()
        if balance <= 0:
            send_telegram("‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ")
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (50% ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï)
        use_balance = balance * 1  # ‡πÉ‡∏ä‡πâ 50% ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        ticker = exchange.fetch_ticker(symbol)
        current_price = float(ticker['last'])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° leverage
        order_size = (use_balance * leverage) / current_price
        order_size = round(order_size, 6)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 6 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TP ‡πÅ‡∏•‡∏∞ SL
        if direction == 'long':
            tp_price = current_price + tp_value
            sl_price = current_price - sl_value
            side = 'buy'
            emoji = 'üìà'
        else:
            tp_price = current_price - tp_value
            sl_price = current_price + sl_value
            side = 'sell'
            emoji = 'üìâ'
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX
        params = {
            'tdMode': 'cross',
            'ordType': 'market',
            'lever': str(leverage),
            'tpTriggerPx': str(tp_price),
            'tpOrdPx': '-1',
            'tpTriggerPxType': 'last',
            'slTriggerPx': str(sl_price),
            'slOrdPx': '-1',
            'slTriggerPxType': 'last'
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        order = exchange.create_order(symbol, 'market', side, order_size, None, params)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        current_position = direction
        entry_price = current_price
        order_id = order.get('id')
        sl_moved = False
        
        # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
        message = f"""{emoji} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠ {direction.upper()}
Entry: {current_price:,.0f}
TP: {tp_price:,.0f}
SL: {sl_price:,.0f}
üí∞ ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô: {use_balance:,.1f} USDT ({leverage}x)
üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {order_size:.6f} BTC"""
        
        send_telegram(message)
        logger.info(f"Order opened: {direction} at {current_price}, size: {order_size}")
        return True
        
    except Exception as e:
        error_msg = f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
        send_telegram(error_msg)
        logger.error(f"Order failed: {e}")
        return False

# === ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô ===
def move_sl_to_breakeven():
    global sl_moved
    
    try:
        if sl_moved:
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SL ‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)
        if current_position == 'long':
            new_sl = entry_price - be_sl
        else:
            new_sl = entry_price + be_sl
        
        sl_moved = True
        message = f"""üîÑ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏¥‡πà‡∏á +{be_profit_trigger} ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ (Break-even)
üìç Entry: {entry_price:,.0f}
üõ°Ô∏è SL ‡πÉ‡∏´‡∏°‡πà: {new_sl:,.0f}"""
        
        send_telegram(message)
        logger.info(f"SL moved to breakeven: {new_sl}")
        
    except Exception as e:
        logger.error(f"Move SL error: {e}")

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SL ===
def monitor_position():
    global current_position, sl_moved, entry_price, order_id
    
    if not current_position:
        return
        
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
        pos_info = get_current_position()
        
        if not pos_info:
            # ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£
            current_price = float(exchange.fetch_ticker(symbol)['last'])
            
            if current_position == 'long':
                pnl = current_price - entry_price
                if current_price >= entry_price + tp_value:
                    close_reason = "TP"
                    emoji = "‚úÖ"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage  # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
‡∏Å‡∏≥‡πÑ‡∏£: +{abs(pnl_usdt):,.0f} USDT"""
                elif current_price <= entry_price - sl_value:
                    close_reason = "SL"
                    emoji = "‚ùå"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {pnl_usdt:,.0f} USDT"""
                else:
                    close_reason = "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î"
                    emoji = "üîÑ"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
P&L: {pnl_usdt:,.0f} USDT"""
            else:  # short
                pnl = entry_price - current_price
                if current_price <= entry_price - tp_value:
                    close_reason = "TP"
                    emoji = "‚úÖ"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
‡∏Å‡∏≥‡πÑ‡∏£: +{abs(pnl_usdt):,.0f} USDT"""
                elif current_price >= entry_price + sl_value:
                    close_reason = "SL"
                    emoji = "‚ùå"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô: {pnl_usdt:,.0f} USDT"""
                else:
                    close_reason = "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î"
                    emoji = "üîÑ"
                    pnl_usdt = pnl * exchange.fetch_ticker(symbol)['last'] / leverage
                    message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢ {close_reason}
P&L: {pnl_usdt:,.0f} USDT"""
            
            send_telegram(message)
            logger.info(f"Position closed: {close_reason}")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            current_position = None
            entry_price = None
            order_id = None
            sl_moved = False
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL
        current_price = float(exchange.fetch_ticker(symbol)['last'])
        
        if current_position == 'long':
            pnl = current_price - entry_price
        else:
            pnl = entry_price - current_price
        
        # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á 350
        if not sl_moved and pnl >= be_profit_trigger:
            move_sl_to_breakeven()
        
        logger.info(f"Position: {current_position}, PnL: {pnl:.2f}, Price: {current_price:.2f}")
        
    except Exception as e:
        logger.error(f"Monitor position error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

# === ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ===
def daily_report():
    global last_daily_report
    
    now = datetime.now()
    today = now.date()
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if last_daily_report == today:
        return
    
    try:
        balance = get_portfolio_balance()
        message = f"""‚è± ‡∏ö‡∏≠‡∏ó‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‚úÖ
‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance:,.1f} USDT
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now.strftime('%d/%m/%Y %H:%M')}"""
        
        send_telegram(message)
        last_daily_report = today
        logger.info("Daily report sent")
        
    except Exception as e:
        logger.error(f"Daily report error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Background ===
def daily_report_scheduler():
    while True:
        try:
            time.sleep(3600)  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            daily_report()
        except Exception as e:
            logger.error(f"Daily report scheduler error: {e}")

# === MAIN LOOP ===
def main():
    global portfolio_balance
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        portfolio_balance = get_portfolio_balance()
        send_telegram(f"ü§ñ EMA Cross Bot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô\n‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {portfolio_balance:,.1f} USDT")
        logger.info("Bot started")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Daily Report Scheduler
        daily_thread = threading.Thread(target=daily_report_scheduler, daemon=True)
        daily_thread.start()
        
    except Exception as e:
        error_msg = f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OKX API\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
        send_telegram(error_msg)
        logger.error(f"Startup error: {e}")
        time.sleep(30)
        return
    
    while True:
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            monitor_position()
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            if not current_position:
                signal = check_ema_cross()
                
                if signal:
                    logger.info(f"EMA Cross Signal: {signal}")
                    success = open_order_with_tpsl(signal)
                    if success:
                        time.sleep(5)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            
            time.sleep(10)  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô)
            
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            send_telegram("üõë Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            break
            
        except ccxt.NetworkError as e:
            error_msg = f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ OKX API\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: Network Timeout | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            logger.error(error_msg)
            send_telegram(error_msg)
            time.sleep(30)
            
        except ccxt.ExchangeError as e:
            error_msg = f"‚õîÔ∏è Error: OKX Exchange Error\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            logger.error(error_msg)
            send_telegram(error_msg)
            time.sleep(30)
            
        except Exception as e:
            error_msg = f"‚õîÔ∏è Error: Main loop error\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e} | Retry ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"
            logger.error(error_msg)
            send_telegram(error_msg)
            time.sleep(30)

if __name__ == '__main__':
    main()
