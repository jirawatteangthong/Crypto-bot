import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging
import threading
import json
import os

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
api_key = '8f528085-448c-4480-a2b0-d7f72afb38ad'
secret = '05A665CEAF8B2161483DF63CB10085D2'
password = 'Jirawat1-'
symbol = 'BTC/USDT:USDT'
timeframe = '15m'
leverage = 20
tp_value = 500
sl_value = 990
be_profit_trigger = 350
be_sl = 100

telegram_token = '7752789264:AAF-0zdgHsSSYe7PS17ePYThOFP3k7AjxBY'
telegram_chat_id = '8104629569'

# === ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏∏‡∏• ===
STATS_FILE = 'trading_stats.json'

# === ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ===
current_position = None  # None, 'long', 'short'
entry_price = None
order_id = None
sl_moved = False
last_ema_cross_time = None  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥
portfolio_balance = 0
last_daily_report = None
initial_balance = 0

# === ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ===
daily_stats = {
    'date': None,
    'tp_count': 0,
    'sl_count': 0,
    'total_pnl': 0,
    'trades': []
}

# === Exchange Setup ===
exchange = ccxt.okx({
    'apiKey': api_key,
    'secret': secret,
    'password': password,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.set_sandbox_mode(False)

# === ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ===
def load_daily_stats():
    global daily_stats
    try:
        if os.path.exists(STATS_FILE):
            with open(STATS_FILE, 'r') as f:
                daily_stats = json.load(f)
    except Exception as e:
        logger.error(f"Load stats error: {e}")
        daily_stats = {
            'date': None,
            'tp_count': 0,
            'sl_count': 0,
            'total_pnl': 0,
            'trades': []
        }

def save_daily_stats():
    try:
        with open(STATS_FILE, 'w') as f:
            json.dump(daily_stats, f)
    except Exception as e:
        logger.error(f"Save stats error: {e}")

def reset_daily_stats():
    global daily_stats
    daily_stats = {
        'date': datetime.now().strftime('%Y-%m-%d'),
        'tp_count': 0,
        'sl_count': 0,
        'total_pnl': 0,
        'trades': []
    }
    save_daily_stats()

def add_trade_result(close_type, pnl_usdt):
    global daily_stats
    
    today = datetime.now().strftime('%Y-%m-%d')
    
    if daily_stats['date'] != today:
        reset_daily_stats()
    
    if close_type == 'TP':
        daily_stats['tp_count'] += 1
    elif close_type == 'SL':
        daily_stats['sl_count'] += 1
    
    daily_stats['total_pnl'] += pnl_usdt
    daily_stats['trades'].append({
        'time': datetime.now().strftime('%H:%M:%S'),
        'type': close_type,
        'pnl': pnl_usdt
    })
    
    save_daily_stats()

# === Telegram ===
def send_telegram(msg):
    try:
        requests.get(
            f'https://api.telegram.org/bot{telegram_token}/sendMessage',
            params={'chat_id': telegram_chat_id, 'text': msg},
            timeout=10
        )
        logger.info(f"Telegram: {msg}")
    except Exception as e:
        logger.error(f"Telegram error: {e}")

# === ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ===
def get_portfolio_balance():
    global portfolio_balance
    try:
        balance = exchange.fetch_balance()
        usdt_balance = balance['USDT']['free'] + balance['USDT']['used']
        portfolio_balance = usdt_balance
        return usdt_balance
    except Exception as e:
        logger.error(f"Get balance error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return 0

# === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ===
def calculate_ema(prices, period):
    if len(prices) < period:
        return None
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ SMA
    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))
    
    return ema

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á EMA (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô) ===
def check_ema_cross():
    global last_ema_cross_time
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=250)
        if len(ohlcv) < 200:
            logger.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA")
            return None
            
        closes = [candle[4] for candle in ohlcv]
        timestamps = [candle[0] for candle in ohlcv]
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 3 ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
        current_ema50 = calculate_ema(closes, 50)
        current_ema200 = calculate_ema(closes, 200)
        prev_ema50 = calculate_ema(closes[:-1], 50)
        prev_ema200 = calculate_ema(closes[:-1], 200)
        prev2_ema50 = calculate_ema(closes[:-2], 50)
        prev2_ema200 = calculate_ema(closes[:-2], 200)
        
        if None in [current_ema50, current_ema200, prev_ema50, prev_ema200, prev2_ema50, prev2_ema200]:
            logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÑ‡∏î‡πâ")
            return None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô
        cross_signal = None
        current_candle_time = timestamps[-1]
        
        # Golden Cross: EMA50 ‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ EMA200
        if (prev2_ema50 <= prev2_ema200 and 
            prev_ema50 <= prev_ema200 and 
            current_ema50 > current_ema200):
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if last_ema_cross_time != current_candle_time:
                cross_signal = 'long'
                last_ema_cross_time = current_candle_time
                logger.info(f"üî• Golden Cross detected! EMA50({current_ema50:.1f}) > EMA200({current_ema200:.1f})")
                send_telegram(f"üî• Golden Cross detected!\nEMA50: {current_ema50:.1f}\nEMA200: {current_ema200:.1f}\nPrice: {closes[-1]:.1f}")
        
        # Death Cross: EMA50 ‡∏ï‡∏±‡∏î‡∏•‡∏á‡πÉ‡∏ï‡πâ EMA200
        elif (prev2_ema50 >= prev2_ema200 and 
              prev_ema50 >= prev_ema200 and 
              current_ema50 < current_ema200):
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
            if last_ema_cross_time != current_candle_time:
                cross_signal = 'short'
                last_ema_cross_time = current_candle_time
                logger.info(f"üî• Death Cross detected! EMA50({current_ema50:.1f}) < EMA200({current_ema200:.1f})")
                send_telegram(f"üî• Death Cross detected!\nEMA50: {current_ema50:.1f}\nEMA200: {current_ema200:.1f}\nPrice: {closes[-1]:.1f}")
        
        # ‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EMA ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ)
        if int(time.time()) % 300 == 0:  # ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
            logger.info(f"EMA Status - 50: {current_ema50:.1f}, 200: {current_ema200:.1f}, Price: {closes[-1]:.1f}")
        
        return cross_signal
        
    except Exception as e:
        logger.error(f"EMA calculation error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return None

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
def get_current_position():
    try:
        positions = exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['contracts'] > 0:
                return {
                    'side': pos['side'],
                    'size': pos['contracts'],
                    'entry_price': pos['entryPrice'],
                    'unrealized_pnl': pos['unrealizedPnl']
                }
        return None
    except Exception as e:
        logger.error(f"Get position error: {e}")
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        return None

# === ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° TP/SL (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î) ===
def open_order_with_tpsl(direction):
    global current_position, entry_price, order_id, sl_moved
    
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_pos = get_current_position()
        if existing_pos:
            logger.info("‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        balance = get_portfolio_balance()
        if balance <= 100:  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 100 USDT
            send_telegram("‚õîÔ∏è Error: ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 100 USDT)")
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (50% ‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏£‡πå‡∏ï)
        use_balance = balance * 0.5
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        ticker = exchange.fetch_ticker(symbol)
        current_price = float(ticker['last'])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        order_size = (use_balance * leverage) / current_price
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏á OKX
        order_size = round(order_size, 6)
        
        if order_size < 0.001:  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Ç‡∏≠‡∏á BTC
            send_telegram("‚õîÔ∏è Error: ‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
            return False
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TP ‡πÅ‡∏•‡∏∞ SL
        if direction == 'long':
            tp_price = round(current_price + tp_value, 1)
            sl_price = round(current_price - sl_value, 1)
            side = 'buy'
            emoji = 'üìà'
        else:
            tp_price = round(current_price - tp_value, 1)
            sl_price = round(current_price + sl_value, 1)
            side = 'sell'
            emoji = 'üìâ'
        
        # ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        send_telegram(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {direction.upper()}...")
        logger.info(f"Opening {direction} order: size={order_size}, price={current_price}")
        
        # ‡∏ï‡∏±‡πâ‡∏á leverage ‡∏Å‡πà‡∏≠‡∏ô
        try:
            exchange.set_leverage(leverage, symbol)
            logger.info(f"Leverage set to {leverage}x")
        except Exception as e:
            logger.warning(f"Set leverage warning: {e}")
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX
        params = {
            'tdMode': 'cross',
            'ordType': 'market',
            'tpTriggerPx': str(tp_price),
            'tpOrdPx': '-1',
            'tpTriggerPxType': 'last',
            'slTriggerPx': str(sl_price),
            'slOrdPx': '-1',
            'slTriggerPxType': 'last'
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        order = exchange.create_order(symbol, 'market', side, order_size, None, params)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if order and order.get('id'):
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            current_position = direction
            entry_price = current_price
            order_id = order.get('id')
            sl_moved = False
            
            # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            message = f"""{emoji} ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {direction.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
üí∞ Entry: {current_price:,.1f} USDT
üéØ TP: {tp_price:,.1f} USDT  
üõ°Ô∏è SL: {sl_price:,.1f} USDT
üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {order_size:.6f} BTC
üíµ ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô: {use_balance:,.1f} USDT ({leverage}x)
Order ID: {order_id}"""
            
            send_telegram(message)
            logger.info(f"Order opened successfully: {direction} at {current_price}")
            return True
        else:
            send_telegram(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Order ID")
            return False
        
    except ccxt.InsufficientFunds as e:
        send_telegram(f"‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: {e}")
        logger.error(f"Insufficient funds: {e}")
        return False
        
    except ccxt.InvalidOrder as e:
        send_telegram(f"‚ùå ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {e}")
        logger.error(f"Invalid order: {e}")
        return False
        
    except Exception as e:
        send_telegram(f"‚õîÔ∏è Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {e}")
        logger.error(f"Order failed: {e}")
        return False

# === ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô ===
def move_sl_to_breakeven():
    global sl_moved
    
    try:
        if sl_moved:
            return
        
        if current_position == 'long':
            new_sl = entry_price - be_sl
        else:
            new_sl = entry_price + be_sl
        
        sl_moved = True
        message = f"""üîÑ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô
üìç Entry: {entry_price:,.1f}
üõ°Ô∏è SL ‡πÉ‡∏´‡∏°‡πà: {new_sl:,.1f}
üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: +{be_profit_trigger} USDT"""
        
        send_telegram(message)
        logger.info(f"SL moved to breakeven: {new_sl}")
        
    except Exception as e:
        logger.error(f"Move SL error: {e}")

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SL ===
def monitor_position():
    global current_position, sl_moved, entry_price, order_id
    
    if not current_position:
        return
        
    try:
        pos_info = get_current_position()
        
        if not pos_info:
            # ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            current_price = float(exchange.fetch_ticker(symbol)['last'])
            
            if current_position == 'long':
                pnl_points = current_price - entry_price
                if current_price >= entry_price + tp_value:
                    close_reason = "TP"
                    emoji = "‚úÖ"
                elif current_price <= entry_price - sl_value:
                    close_reason = "SL"
                    emoji = "‚ùå"
                else:
                    close_reason = "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î"
                    emoji = "üîÑ"
            else:
                pnl_points = entry_price - current_price
                if current_price <= entry_price - tp_value:
                    close_reason = "TP"
                    emoji = "‚úÖ"
                elif current_price >= entry_price + sl_value:
                    close_reason = "SL"
                    emoji = "‚ùå"
                else:
                    close_reason = "‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î"
                    emoji = "üîÑ"
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL ‡πÉ‡∏ô USDT
            position_value = (portfolio_balance * 0.5 * leverage) / entry_price
            pnl_usdt = pnl_points * position_value
            
            message = f"""{emoji} ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {close_reason}
P&L: {pnl_usdt:+,.1f} USDT
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î: {current_price:,.1f}"""
            
            send_telegram(message)
            logger.info(f"Position closed: {close_reason}, PnL: {pnl_usdt:.2f}")
            
            add_trade_result(close_reason, pnl_usdt)
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            current_position = None
            entry_price = None
            order_id = None
            sl_moved = False
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_price = float(exchange.fetch_ticker(symbol)['last'])
        
        if current_position == 'long':
            pnl = current_price - entry_price
        else:
            pnl = entry_price - current_price
        
        # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤
        if not sl_moved and pnl >= be_profit_trigger:
            move_sl_to_breakeven()
        
        # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PnL ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        if int(time.time()) % 300 == 0:
            logger.info(f"Position: {current_position}, PnL: {pnl:.1f}, Price: {current_price:.1f}")
        
    except Exception as e:
        logger.error(f"Monitor position error: {e}")

# === ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ===
def daily_report():
    global last_daily_report
    
    now = datetime.now()
    today = now.date()
    
    if last_daily_report == today:
        return
    
    try:
        balance = get_portfolio_balance()
        
        today_str = now.strftime('%Y-%m-%d')
        if daily_stats['date'] == today_str:
            tp_count = daily_stats['tp_count']
            sl_count = daily_stats['sl_count']
            total_pnl = daily_stats['total_pnl']
        else:
            tp_count = 0
            sl_count = 0
            total_pnl = 0
        
        pnl_from_start = balance - initial_balance if initial_balance > 0 else 0
        
        message = f"""üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
üîπ ‡∏Å‡∏≥‡πÑ‡∏£‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: {total_pnl:+,.1f} USDT
üîπ TP: {tp_count} | SL: {sl_count}
üîπ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance:,.1f} USDT
üîπ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°: {pnl_from_start:+,.1f} USDT
‚è± ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‚úÖ
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {now.strftime('%d/%m/%Y %H:%M')}"""
        
        send_telegram(message)
        last_daily_report = today
        logger.info("Daily report sent")
        
    except Exception as e:
        logger.error(f"Daily report error: {e}")

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Background ===
def daily_report_scheduler():
    while True:
        try:
            time.sleep(3600)
            daily_report()
        except Exception as e:
            logger.error(f"Daily report scheduler error: {e}")

# === ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ===
def send_startup_message():
    global initial_balance
    
    try:
        initial_balance = get_portfolio_balance()
        startup_time = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        message = f"""ü§ñ EMA Cross Bot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {initial_balance:,.1f} USDT
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {startup_time}
üìä ‡πÄ‡∏ü‡∏£‡∏°: {timeframe} | Leverage: {leverage}x
üéØ TP: {tp_value} | SL: {sl_value}
üîß ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô: 50% ‡∏ï‡πà‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
üìà ‡∏£‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì EMA Cross..."""
        
        send_telegram(message)
        logger.info("Bot started successfully")
        
    except Exception as e:
        logger.error(f"Startup error: {e}")

# === MAIN LOOP ===
def main():
    global portfolio_balance, initial_balance
    
    try:
        load_daily_stats()
        send_startup_message()
        
        daily_thread = threading.Thread(target=daily_report_scheduler, daemon=True)
        daily_thread.start()
        
    except Exception as e:
        send_telegram(f"‚õîÔ∏è Startup Error: {e}")
        logger.error(f"Startup error: {e}")
        time.sleep(30)
        return
    
    while True:
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            monitor_position()
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            if not current_position:
                signal = check_ema_cross()
                
                if signal:
                    logger.info(f"üî• EMA Cross Signal detected: {signal}")
                    success = open_order_with_tpsl(signal)
                    
                    if success:
                        logger.info(f"Order opened successfully for {signal}")
                        time.sleep(10)  # ‡∏£‡∏≠‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                    else:
                        logger.error(f"Failed to open order for {signal}")
                        time.sleep(5)
            
            time.sleep(10)  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            send_telegram("üõë Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            break
            
        except ccxt.NetworkError as e:
            logger.error(f"Network error: {e}")
            send_telegram(f"‚õîÔ∏è Network Error: ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(30)
            
        except ccxt.ExchangeError as e:
            logger.error(f"Exchange error: {e}")
            send_telegram(f"‚õîÔ∏è Exchange Error: {e}")
            time.sleep(30)
            
        except Exception as e:
            logger.error(f"Main loop error: {e}")
            send_telegram(f"‚õîÔ∏è Main Loop Error: {e}")
            time.sleep(30)

if __name__ == '__main__':
    main()
