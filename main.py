import ccxt
import time
import requests
from datetime import datetime, timedelta
import logging

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging ===
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ===
api_key = '8f528085-448c-4480-a2b0-d7f72afb38ad'       # ‡πÉ‡∏™‡πà API KEY
secret = '05A665CEAF8B2161483DF63CB10085D2'
password = 'Jirawat1-'
symbol = 'BTC/USDT:USDT'
timeframe = '15m'
order_size = 0.9
leverage = 25
tp_value = 500
sl_value = 990
be_profit_trigger = 350
be_sl = 100

telegram_token = '7752789264:AAF-0zdgHsSSYe7PS17ePYThOFP3k7AjxBY'
telegram_chat_id = '8104629569'

# === ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î ===
current_position = None  # None, 'long', 'short'
entry_price = None
order_id = None
sl_moved = False
last_ema_state = None  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ EMA ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤

# === Exchange Setup ===
exchange = ccxt.okx({
    'apiKey': api_key,
    'secret': secret,
    'password': password,
    'enableRateLimit': True,
    'options': {'defaultType': 'swap'}
})
exchange.set_sandbox_mode(False)

# === Telegram ===
def send_telegram(msg):
    try:
        requests.get(
            f'https://api.telegram.org/bot{telegram_token}/sendMessage',
            params={'chat_id': telegram_chat_id, 'text': msg},
            timeout=10
        )
        logger.info(f"Telegram: {msg}")
    except Exception as e:
        logger.error(f"Telegram error: {e}")

# === ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ===
def calculate_ema(prices, period):
    if len(prices) < period:
        return None
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ SMA
    sma = sum(prices[:period]) / period
    ema = sma
    multiplier = 2 / (period + 1)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA
    for price in prices[period:]:
        ema = (price * multiplier) + (ema * (1 - multiplier))
    
    return ema

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á EMA ===
def check_ema_cross():
    global last_ema_state
    
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=250)
        closes = [candle[4] for candle in ohlcv]
        
        if len(closes) < 200:
            return None
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì EMA ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        current_ema50 = calculate_ema(closes, 50)
        current_ema200 = calculate_ema(closes, 200)
        prev_ema50 = calculate_ema(closes[:-1], 50)
        prev_ema200 = calculate_ema(closes[:-1], 200)
        
        if None in [current_ema50, current_ema200, prev_ema50, prev_ema200]:
            return None
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_state = 'above' if current_ema50 > current_ema200 else 'below'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏±‡∏ô
        cross_signal = None
        
        # Golden Cross: EMA50 ‡∏ï‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ EMA200
        if prev_ema50 <= prev_ema200 and current_ema50 > current_ema200:
            cross_signal = 'long'
            logger.info(f"Golden Cross detected: EMA50({current_ema50:.2f}) > EMA200({current_ema200:.2f})")
        
        # Death Cross: EMA50 ‡∏ï‡∏±‡∏î‡∏•‡∏á‡πÉ‡∏ï‡πâ EMA200  
        elif prev_ema50 >= prev_ema200 and current_ema50 < current_ema200:
            cross_signal = 'short'
            logger.info(f"Death Cross detected: EMA50({current_ema50:.2f}) < EMA200({current_ema200:.2f})")
        
        last_ema_state = current_state
        return cross_signal
        
    except Exception as e:
        logger.error(f"EMA calculation error: {e}")
        return None

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ===
def get_current_position():
    try:
        positions = exchange.fetch_positions([symbol])
        for pos in positions:
            if pos['contracts'] > 0:
                return {
                    'side': pos['side'],
                    'size': pos['contracts'],
                    'entry_price': pos['entryPrice'],
                    'unrealized_pnl': pos['unrealizedPnl']
                }
        return None
    except Exception as e:
        logger.error(f"Get position error: {e}")
        return None

# === ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° TP/SL ===
def open_order_with_tpsl(direction):
    global current_position, entry_price, order_id, sl_moved
    
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_pos = get_current_position()
        if existing_pos:
            logger.info("‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        ticker = exchange.fetch_ticker(symbol)
        current_price = float(ticker['last'])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì TP ‡πÅ‡∏•‡∏∞ SL
        if direction == 'long':
            tp_price = current_price + tp_value
            sl_price = current_price - sl_value
            side = 'buy'
        else:
            tp_price = current_price - tp_value
            sl_price = current_price + sl_value
            side = 'sell'
        
        # ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX
        params = {
            'tdMode': 'cross',
            'ordType': 'market',
            'lever': str(leverage),
            'tpTriggerPx': str(tp_price),
            'tpOrdPx': '-1',
            'tpTriggerPxType': 'last',
            'slTriggerPx': str(sl_price),
            'slOrdPx': '-1', 
            'slTriggerPxType': 'last'
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        order = exchange.create_order(symbol, 'market', side, order_size, None, params)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        current_position = direction
        entry_price = current_price
        order_id = order.get('id')
        sl_moved = False
        
        # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        message = f"""üöÄ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {direction.upper()}
üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: {current_price:.2f}
üéØ TP: {tp_price:.2f} (+{tp_value})
üõ°Ô∏è SL: {sl_price:.2f} (-{sl_value})
üìä ‡∏Ç‡∏ô‡∏≤‡∏î: {order_size} BTC
Order ID: {order_id}"""
        
        send_telegram(message)
        logger.info(f"Order opened: {direction} at {current_price}")
        return True
        
    except Exception as e:
        error_msg = f"‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}"
        send_telegram(error_msg)
        logger.error(error_msg)
        return False

# === ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô ===
def move_sl_to_breakeven():
    global sl_moved
    
    try:
        if sl_moved:
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SL ‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô)
        if current_position == 'long':
            new_sl = entry_price - be_sl
        else:
            new_sl = entry_price + be_sl
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OKX ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ API ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Algo Order
        # ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        # ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏¢ ‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ OKX ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
        
        sl_moved = True
        message = f"""üîÑ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏ô
üìç ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤: {entry_price:.2f}
üõ°Ô∏è SL ‡πÉ‡∏´‡∏°‡πà: {new_sl:.2f}
üíö ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô: {current_position.upper()}"""
        
        send_telegram(message)
        logger.info(f"SL moved to breakeven: {new_sl}")
        
    except Exception as e:
        logger.error(f"Move SL error: {e}")

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ SL ===
def monitor_position():
    global current_position, sl_moved
    
    if not current_position:
        return
        
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á
        pos_info = get_current_position()
        
        if not pos_info:
            # ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            logger.info("Position closed")
            message = f"‚úÖ ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô {current_position.upper()} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß"
            send_telegram(message)
            
            current_position = None
            entry_price = None
            order_id = None
            sl_moved = False
            return
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PnL
        current_price = float(exchange.fetch_ticker(symbol)['last'])
        
        if current_position == 'long':
            pnl = current_price - entry_price
        else:
            pnl = entry_price - current_price
        
        # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô SL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£‡∏ñ‡∏∂‡∏á 350
        if not sl_moved and pnl >= be_profit_trigger:
            move_sl_to_breakeven()
        
        logger.info(f"Position: {current_position}, PnL: {pnl:.2f}, Price: {current_price:.2f}")
        
    except Exception as e:
        logger.error(f"Monitor position error: {e}")

# === MAIN LOOP ===
def main():
    send_telegram("ü§ñ EMA Cross Bot ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    logger.info("Bot started")
    
    while True:
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            monitor_position()
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏ã‡∏¥‡∏ä‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
            if not current_position:
                signal = check_ema_cross()
                
                if signal:
                    logger.info(f"EMA Cross Signal: {signal}")
                    open_order_with_tpsl(signal)
                    time.sleep(5)  # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            
            time.sleep(15)  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏∏‡∏Å 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            send_telegram("üõë Bot ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            break
            
        except Exception as e:
            error_msg = f"‚ùå Main loop error: {e}"
            logger.error(error_msg)
            send_telegram(error_msg)
            time.sleep(30)  # ‡∏û‡∏±‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

if __name__ == '__main__':
    main()
